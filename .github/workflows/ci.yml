name: Basic Workflow

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  build_and_test_windows:
    runs-on: windows-latest
    env:
      artifact_name: parsearg_windows.zip
    strategy:
      matrix:
        build_type: [Debug, Release]
    steps:
      - uses: actions/checkout@v4

      - name: Configure cmake
        shell: bash
        run: |
          cmake -S . -B build -DTEST_ENABLE=ON

      - name: Build
        shell: bash
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel 4

      - name: Setup OpenCppCoverage and add to PATh
        if: matrix.build_type == 'Debug'
        run: |
          choco install OpenCppCoverage -y
          echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

      - name: Test with coverage
        if: matrix.build_type == 'Debug'
        working-directory: ${{ github.workspace }}/build
        run: |
          OpenCppCoverage.exe --quiet --export_type cobertura:cobertura_win.xml --cover_children --sources ${{ github.workspace }} --excluded_sources ${{ github.workspace }}\build -- ctest.exe --build-config Debug

      - name: Upload coverage report
        if: matrix.build_type == 'Debug'
        uses: actions/upload-artifact@v4
        with:
          name: cobertura_win.xml
          path: build/cobertura_win.xml

      - name: Package
        shell: bash
        run: |
          mkdir parsearg/
          cp parsearg.hpp parsearg/
          cp '${{ github.workspace }}/build/${{ matrix.build_type }}/parsearg.lib' parsearg/
          7z a ${{ env.artifact_name }} parsearg/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows_${{ matrix.build_type }}
          path: ${{ env.artifact_name }}

  build_and_test_linux:
    runs-on: ubuntu-latest
    env:
      artifact_name: parsearg_linux.tgz
    strategy:
      matrix:
        build_type: [Debug, Release]
    steps:
      - uses: actions/checkout@v4

      - name: Configure cmake
        shell: bash
        run: |
          cmake -S . -B build -DTEST_ENABLE=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build
        shell: bash
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel 4

      - name: Test
        if: matrix.build_type == 'Debug'
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: |
          ctest -C ${{ matrix.build_type }}

      - name: Package
        shell: bash
        run: |
          mkdir parsearg/
          cp parsearg.hpp parsearg/
          cp '${{ github.workspace }}/build/libparsearg.a' parsearg/
          tar czvf ${{ env.artifact_name }} parsearg/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux_${{ matrix.build_type }}
          path: ${{ env.artifact_name }}


  release:
    needs: [build_and_test_windows, build_and_test_linux]
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'main' && github.event.pull_request.merged == true
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          pattern: '*_Release'
          merge-multiple: true

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: 'parsearg ${{ github.event.pull_request.title }}'
          body: ${{ github.event.pull_request.body }}
          tag_name: ${{ github.event.pull_request.title }}
          make_latest: true
          files: |
            parsearg_linux.tgz
            parsearg_windows.zip